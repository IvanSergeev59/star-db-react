{"version":3,"sources":["components/header/index.js","components/header/header.js","components/error-indicator/error-indicator.js","services/swapi-service.js","components/spinner/spinner.js","components/item-list/item-list.js","components/item-list/index.js","components/person-details/person-details.js","components/person-details/index.js","components/people-page/people-page.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/app/app.js","components/app/index.js","index.js"],"names":["Header","className","href","ErrorIndicator","SwapiService","apiBase","transformPlanet","planet","id","extractId","name","population","rotation","rotation_period","diameter","transformStarship","starship","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","transformPerson","person","gender","birthYear","birth_year","eyeColor","eye_color","url","a","fetch","this","res","ok","Error","status","json","getResource","results","map","item","match","Spinner","ItemList","swapiService","state","peopleList","getAllPeople","then","setState","arr","onClick","props","onItemSelecter","items","renderItems","Component","PersonDetails","loading","updatePerson","prevProps","personId","getPerson","spinner","context","PersonLoading","Fragment","src","alt","PeoplePage","selectedPerson","hasError","onPersonSelected","error","info","RandomPlanet","onPlanetLoaded","onError","err","updatePlanet","Math","floor","random","getPlanet","catch","interval","setInterval","clearInterval","hasData","errorDisplay","content","PlanetLoading","App","showRandomPlanet","toggleRandomPlanet","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef716d03.chunk.js","sourcesContent":["import Header from './header';\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nimport './header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header d-flex\">\r\n          <h3>\r\n            <a href=\"#\">\r\n              Star DB\r\n            </a>\r\n          </h3>\r\n          <ul className=\"d-flex\">\r\n            <li>\r\n              <a href=\"#\">People</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#\">Planets</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#\">Starships</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Header","import react from \"react\";\r\n\r\nimport \"./error-indicator.css\";\r\n\r\n\r\nconst ErrorIndicator = () => {\r\n    return (  \r\n        <div className= \"error-indicator\">\r\n           \r\n            <span className=\"boom\">BOOM!</span>\r\n            <span>\r\n                something has gone terribly wrong\r\n            </span>\r\n            <span>\r\n                (but we already sent droids to fix it)\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorIndicator","export default class SwapiService {\r\n    apiBase = 'https://swapi.dev/api'\r\n    async getResource(url) {\r\n      \r\n      const res = await fetch(`${this.apiBase}${url}`);\r\n  \r\n    if (!res.ok) {\r\n      throw new Error (`Could not fetch ${this.apiBase}` + ` , received ${res.status}`)\r\n    }\r\n  \r\n   return await res.json();\r\n    } \r\n  \r\n    async getAllPeople() {\r\n      const res = await this.getResource(`/people/`)\r\n      return res.results.map(this.transformPerson)\r\n    }\r\n  \r\n    async getPerson(id) {\r\n      const person = await this.getResource(`/people/${id}/`)\r\n      return this.transformPerson(person)\r\n    }\r\n  \r\n    async getAllPlanets() {\r\n      const res = await this.getResource('/planets')\r\n      return res.results.map(this.transformPlanet)\r\n    }\r\n    \r\n    async getPlanet(id) {\r\n      const planet = await this.getResource(`/planets/${id}/`);\r\n      return this.transformPlanet(planet)\r\n    }\r\n  \r\n    async getAllStarships() {\r\n      const res = await this.getResource('/starships')\r\n      return res.results.map(this.transformStarship)\r\n    }\r\n    \r\n    async getStarship(id) {\r\n      const starship = await this.getResource(`/starships/${id}/`)\r\n      return this.transformStarship(starship)\r\n    }\r\n\r\n    extractId(item) {\r\n      const idRegExp = /\\/([0-9])*\\/$/;\r\n      return item.url.match(idRegExp)[1] \r\n    }\r\n\r\n    transformPlanet = (planet) => {      \r\n      return { \r\n        id : this.extractId(planet),       \r\n        name: planet.name,\r\n        population: planet.population,\r\n        rotation: planet.rotation_period,\r\n        diameter:planet.diameter\r\n      }\r\n    }\r\n\r\n    transformStarship = (starship) =>  {\r\n      return{\r\n        id:this.extractId(starship),\r\n        name: starship.name,\r\n        model: starship.model,\r\n        manufacturer: starship.manufacturer,\r\n        costInCredits: starship.costInCredits,\r\n        length: starship.length,\r\n        crew: starship.crew,\r\n        passengers: starship.passengers,\r\n        cargoCapacity: starship.cargoCapacity\r\n      }\r\n    }\r\n\r\n    transformPerson = (person) => {\r\n      return {\r\n        id: this.extractId(person),\r\n        name: person.name,\r\n        gender: person.gender,\r\n        birthYear: person.birth_year,\r\n        eyeColor: person.eye_color\r\n      }\r\n    }\r\n  }\r\n  ","import react from \"react\";\r\n\r\nimport './spinner.css'\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"loadingio-spinner-double-ring-89cy8qtckb9\"><div className=\"ldio-qbm1goxb2tb\">\r\n            <div></div>\r\n            <div></div>\r\n            <div><div></div></div>\r\n            <div><div></div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner","import React, {Component} from \"react\";\r\nimport SwapiService from \"../../services/swapi-service\";\r\nimport Spinner from '../spinner/spinner';\r\n\r\nimport './item-list.css'\r\n\r\nexport default class ItemList extends Component {\r\n\r\n    swapiService = new SwapiService()\r\n\r\n    state = {\r\n      peopleList : null\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.swapiService\r\n        .getAllPeople()\r\n        .then((peopleList) => {\r\n          this.setState({\r\n            peopleList\r\n          })\r\n        })\r\n    }\r\n\r\n    renderItems(arr) {\r\n      return arr.map(({id, name}) => {\r\n        return (\r\n          <li className=\"list-group-item\"\r\n            key = {id}\r\n            onClick={() => this.props.onItemSelecter(id)}>\r\n            {name}\r\n          </li>\r\n        )\r\n      })\r\n    }\r\n\r\n    render() {\r\n\r\n      const {peopleList} = this.state\r\n\r\n      if(!peopleList) {\r\n        return <Spinner />\r\n      }\r\n\r\n      const items = this.renderItems(peopleList)\r\n\r\n      return (\r\n        <ul className=\"item-list list-group\">\r\n          {items}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n  ","import ItemList from './item-list'\r\n\r\nexport default ItemList","import React, { Component } from 'react';\r\nimport SwapiService from '../../services/swapi-service';\r\n\r\nimport './person-details.css';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nexport default class PersonDetails extends Component {\r\n\r\n  swapiService = new SwapiService()\r\n\r\n  state = {\r\n    person: null,\r\n    loading: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updatePerson()\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.personId !== prevProps.personId){\r\n      this.updatePerson();\r\n    }\r\n  }\r\n\r\n  updatePerson() {\r\n    const {personId} = this.props;\r\n    if (!personId) {\r\n      return\r\n    }\r\n    this.swapiService\r\n      .getPerson(personId)\r\n      .then((person) => {\r\n        this.setState({\r\n          person\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const {person, loading} = this.state\r\n    const spinner = loading ? <Spinner /> : null\r\n    const context = <PersonLoading  person={person} />\r\n    if (!person) {\r\n      return <span>Select a person from a list</span>;\r\n    }\r\n    return (      \r\n      <div className=\"person-details card\">\r\n          {spinner}\r\n          {context}\r\n       </div>\r\n    )\r\n  }\r\n}\r\n    const PersonLoading = ({person}) => {\r\n      const {name, gender, birthYear, eyeColor, id} = person\r\n        return (\r\n          <React.Fragment>\r\n            <img className=\"person-image\"\r\n              src={`https://starwars-visualguide.com/assets/img/characters/${id}.jpg`} alt=\"character\"/>\r\n\r\n            <div className=\"card-body\">\r\n              <h4>{name}</h4>\r\n              <ul className=\"list-group list-group-flush\">\r\n                <li className=\"list-group-item\">\r\n                  <span className=\"term\">Gender</span>\r\n                  <span>{gender}</span>\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <span className=\"term\">Birth Year</span>\r\n                  <span>{birthYear}</span>\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <span className=\"term\">Eye Color</span>\r\n                  <span>{eyeColor}</span>\r\n                </li>\r\n              </ul>\r\n            </div> \r\n          </React.Fragment>\r\n    \r\n        )\r\n      }\r\n  \r\n\r\n","import PersonDetails from './person-details';\r\n\r\nexport default PersonDetails;\r\n","import React, {Component} from \"react\";\r\nimport ErrorIndicator from \"../error-indicator/error-indicator\";\r\nimport ItemList from \"../item-list\";\r\nimport PersonDetails from \"../person-details\";\r\n\r\nimport './people-page.css'\r\n\r\nexport default class PeoplePage extends Component {\r\n\r\n    state = {\r\n        selectedPerson: 3,\r\n        hasError: true\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        debugger\r\n\r\n\r\n        this.setState ({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    onPersonSelected = (id) => {\r\n        this.setState({\r\n          selectedPerson: id\r\n        })\r\n      }\r\n\r\n      render() {\r\n\r\n          if (this.state.hasError) {\r\n              return <ErrorIndicator />\r\n          }\r\n\r\n          return (\r\n            <div className=\"row mb2\">\r\n            <div className=\"col-md-6\">\r\n              <ItemList onItemSelecter={this.onPersonSelected}/>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <PersonDetails personId={this.state.selectedPerson}/>\r\n            </div>\r\n          </div>\r\n          )\r\n      }\r\n}","\r\nimport React, { Component } from 'react';\r\n\r\nimport SwapiService from '../../services/swapi-service'\r\nimport ErrorIndicator from '../error-indicator/error-indicator';\r\n\r\nimport Spinner from '../spinner/spinner';\r\nimport './random-planet.css';\r\n\r\nexport default class RandomPlanet extends Component {\r\n\r\n  swapiService = new SwapiService();\r\n\r\n  state= {\r\n    planet: {},\r\n    loading: true\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.updatePlanet()\r\n    this.interval = setInterval(this.updatePlanet, 15000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  onPlanetLoaded = (planet) => {\r\n    this.setState ({\r\n      planet,\r\n      loading: false,\r\n      error: false\r\n    })\r\n\r\n  }\r\n\r\n  onError = (err) => {\r\n    this.setState({      \r\n      error: true,\r\n      loading: false\r\n    })\r\n\r\n  }\r\n\r\n  updatePlanet  = ()  => {\r\n    const id = Math.floor(Math.random()*19);\r\n    this.swapiService\r\n    .getPlanet(id)\r\n      .then(this.onPlanetLoaded)  \r\n      .catch(this.onError)      \r\n    }\r\n\r\n   \r\n\r\n\r\n  render() {\r\n    const {planet, loading, error} = this.state\r\n\r\n    const hasData = !(loading || error)\r\n\r\n    const errorDisplay = error ? <ErrorIndicator /> : null\r\n    const spinner = loading ? <Spinner /> : null\r\n    const content = hasData ? <PlanetLoading planet={planet} /> : null\r\n    \r\n    return (     \r\n      <div className=\"random-planet jumbotron rounded\">      \r\n        {spinner}  \r\n        {content}  \r\n        {errorDisplay}   \r\n      </div>   \r\n    )\r\n  }\r\n}\r\n\r\nconst PlanetLoading = ({planet}) => {\r\n  const {id, population, rotation, diameter, name} = planet\r\n   return (\r\n      <React.Fragment>\r\n        <img className=\"planet-image\"\r\n              src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} alt=\"planet\"/>\r\n          <div>\r\n            <h4>{name}</h4>\r\n            <ul className=\"list-group list-group-flush\">\r\n              <li className=\"list-group-item\">\r\n                <span className=\"term\">Population: </span>\r\n                <span> {population}</span>\r\n              </li>\r\n              <li className=\"list-group-item\">\r\n                <span className=\"term\">Rotation Period: </span>\r\n                <span> {rotation}</span>\r\n              </li>\r\n              <li className=\"list-group-item\">\r\n                <span className=\"term\">Diameter: </span>\r\n                <span> {diameter}</span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </React.Fragment>\r\n    )\r\n  }\r\n      \r\n","import RandomPlanet from './random-planet';\r\n\r\nexport default RandomPlanet;","import React, { Component } from 'react';\r\n\r\nimport Header from '../header';\r\nimport PeoplePage from '../people-page/people-page';\r\nimport RandomPlanet from '../random-planet';\r\n\r\n\r\nimport './app.css';\r\n\r\nexport default class App extends Component {\r\n\r\n  state = {\r\n    showRandomPlanet: true    \r\n  };\r\n\r\n  toggleRandomPlanet = () => {\r\n    this.setState((state) => {\r\n      return {\r\n        showRandomPlanet: !state.showRandomPlanet\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const planet = this.state.showRandomPlanet ?\r\n      <RandomPlanet/> :\r\n      null;\r\n\r\n    return (\r\n      <div className=\"stardb-app\">\r\n        <Header />\r\n        { planet }\r\n\r\n        <button\r\n          className=\"toggle-planet btn btn-warning btn-lg\"\r\n          onClick={this.toggleRandomPlanet}>\r\n          Toggle Random Planet\r\n        </button>\r\n        <PeoplePage /> \r\n        <PeoplePage /> \r\n        <PeoplePage /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import App from './app';\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\nReactDOM.render(<App />,\r\n  document.getElementById('root'));"],"sourceRoot":""}